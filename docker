#!/usr/bin/env bash

set -e

THIS_DOCKER="$(realpath "$0")"
NEXT_DOCKER="$(which --all docker | grep --after-context=1 "$THIS_DOCKER" | tail -1)"
DEFAULT_COMMAND='help'
TIME_FORMAT='+%Y-%m-%dT%H-%M-%SZ'
TIME_GREP_FORMAT='[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}T[0-9]\{2\}-[0-9]\{2\}-[0-9]\{2\}Z'

function main {
  local subcommand
  subcommand="$1"
  if [[ "$subcommand" == '' ]]; then
    subcommand="$DEFAULT_COMMAND"
  fi
  if is_override_subcommand "$subcommand"; then
    call_override_command "$subcommand" "${@:2}"
  else
    call_next_docker "$@"
  fi
}

# Override commands (and help messages)

function help_short_autobuild {
  echo '  autobuild   Build an image from a directory containing a Dockerfile'
}
function help_long_autobuild {
  cat <<EOF

Usage:  docker autobuild PATH

Build an image from a directory containing a Dockerfile. The resulting image will be tagged with the name of the containing directory and tagged with the current time.
EOF
}
function override_autobuild {
  local path image_name image_tag_date
  path="$1"
  if [[ "$#" -ne 1 ]]; then
    echo_err '"docker autobuild" requires exactly 1 argument.'
    help_long_autobuild 1>&2
    return 1
  elif [[ ! -d "$path" ]]; then
    echo_err "'$path' is not a directory"
    help_long_autobuild 1>&2
    return 1
  fi
  image_name="$(get_dir_name "$path")"
  image_tag_date="$(get_time)"
  docker build --tag "$image_name:$image_tag_date" --tag "$image_name:latest" "$path"
}

function help_short_autorun {
  echo '  autorun     Run the latest image built from an autobuild'
}
function help_long_autorun {
  cat <<EOF

Usage:  docker autorun PATH METHOD [ARG...]

Run a container, where PATH is the directory used to build an image and METHOD is the method used to run the container.

Available methods:
  b, bash         Override the entrypoint to /bin/bash
  d, detach       Run the container in detached mode
  e, entrypoint   Override the entrypoint to [ARG...]
  t, tty          Run the container in pseudo-tty mode
EOF
}
function override_autorun {
  local path method args image_name
  path="$1"
  method="$2"
  args=("${@:3}")
  if [[ "$#" -lt 2 ]]; then
    echo_err '"docker autorun" requires at least 2 arguments.'
    help_long_autorun 1>&2
    return 1
  elif [[ ! -d "$path" ]]; then
    echo_err "$path is not a directory"
    return 1
  fi
  image_name="$(get_dir_name "$path")"
  case "$method" in
    b|bash)
      docker run --name "$image_name" --rm --interactive --tty --entrypoint /bin/bash "$image_name"
      ;;
    d|detach)
      docker run --name "$image_name" --rm --detach "$image_name"
      ;;
    e|entrypoint)
      docker run --name "$image_name" --rm --interactive --tty --entrypoint "${args[0]}" "$image_name" "${args[@]:1}"
      ;;
    t|tty)
      docker run --name "$image_name" --rm --interactive --tty "$image_name"
      ;;
    *)
      echo_err "Unknown method: $method"
      help_long_autorun 1>&2
      return 1
      ;;
  esac
}

function help_short_help {
  echo '  help        Show this message or more detailed command info'
}
function help_long_help {
  cat <<EOF

Usage:  docker help [command]

List all available commands or view detailed usage of a command
EOF
}
function override_help {
  if [[ "$#" -eq 0 ]]; then
    local default_help_message help_function
    default_help_message="$(call_next_docker help "$@")"
    echo "$default_help_message" | head --lines=-1
    echo 'Overwritten commands:'
    for help_function in $(get_short_help_commands | sort); do
      "$help_function"
    done
    echo ''
    echo "$default_help_message" | tail --lines=1 
  elif is_override_subcommand "$1"; then
    "help_long_$1"
  else
    call_next_docker help "$@"
  fi
}

# Override finders/testers (metaprogramming)

function call_override_command {
  local command args
  command="$1"
  args=("${@:2}")
  if contains_help_flag "${args[@]}"; then
    call_this_docker help "$command"
  else
    "override_$subcommand" "${args[@]}"
  fi
}

function is_override_subcommand {
  local subcommand
  subcommand="$1"
  get_override_subcommands | grep --quiet "^override_$subcommand$"
}

function get_override_subcommands {
  get_function_names | grep '^override_[a-z]*'
}

function get_short_help_commands {
  get_function_names | grep '^help_short_[a-z]*'
}

function get_long_help_commands {
  get_function_names | grep '^help_long_[a-z]*'
}

function get_function_names {
  declare -F | awk '{print $3}'
}

# Docker-specifc utility functions

function get_image_tags_with_timestamp {
  get_image_tags "$1" | grep "$TIME_GREP_FORMAT"
}

function get_image_tags {
  local image_name
  image_name="${1:?No image name specified.}"
  call_this_docker image ls | awk "\$1 == \"$1\" {print \$2}"
}

# Utility functions

function call_this_docker {
  main "$@"
}

# Note: you probably don't need to use this unless you're overriding an existing function
function call_next_docker {
  if [[ "$EUID" -eq 0 ]]; then
    "$NEXT_DOCKER" "$@"
    echo $?
  else
    sudo "$NEXT_DOCKER" "$@"
  fi
}

function contains_help_flag {
  local arg
  for arg in "$@"; do
    if [[ "$arg" == "--help" ]]; then
      return 0
    fi
  done
  return 1
}

function get_dir_name {
  local path
  path="${1:?No path specified.}"
  basename "$(realpath "$path")"
}

function get_time {
  date --utc "$TIME_FORMAT"
}

function echo_tty {
  echo "$@" > /dev/tty
}

function echo_err {
  >&2 echo "$@"
}

main "$@"