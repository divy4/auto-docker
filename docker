#!/usr/bin/env bash

THIS_DOCKER="$(realpath "$0")"
NEXT_DOCKER="$(which --all docker | grep --after-context=1 "$THIS_DOCKER" | tail -1)"

function main {
  local subcommand
  subcommand="$1"
  if is_override_subcommand "$subcommand"; then
    "override_$subcommand" "${@:2}"
  else
    call_next_docker "${@:2}"
  fi
}

# Override commands (and help messages)

function override_help {
  local help_function
  call_next_docker help "$@"
  echo ''
  echo 'Overwridden commands:'
  for help_function in $(get_short_help_commands | sort); do
    "$help_function"
  done
}

function help_short_help {
  echo '  help        Show this message or more detailed command info'
}

function help_long_help {
  cat <<EOF

Usage:  docker help [command]

List all available commands or view detailed usage of a command
EOF
}

# Override finders/testers (metaprogramming)

function is_override_subcommand {
  local subcommand
  subcommand="$1"
  get_override_subcommands | grep --quiet "^override_$subcommand$"
}

function get_override_subcommands {
  get_function_names | grep '^override_[a-z]*'
}

function get_short_help_commands {
  get_function_names | grep '^help_short_[a-z]*'
}

function get_long_help_commands {
  get_function_names | grep '^help_long_[a-z]*'
}

function get_function_names {
  declare -F | awk '{print $3}'
}

# Utility functions

function get_dir_name {
  local path
  path="${1:?No path specified.}"
  echo "$(dirname "$(realpath "$path")")"
}

function call_this_docker {
  "$THIS_DOCKER" "$@"
}

# Note: you probably don't need to use this unless you're overriding an existing function
function call_next_docker {
  if [[ "$EUID" -eq 0 ]]; then
    "$NEXT_DOCKER" "$@"
  else
    sudo "$NEXT_DOCKER" "$@"
  fi
}

function echo_tty {
  echo "$@" > /dev/tty
}

function echo_err {
  >&2 echo "$@"
}

main "$@"